
AVRASM ver. 2.1.30  E:\tic-tac-toe\Debug\List\tic-tac-toe.asm Sat Jun 10 14:40:14 2023

E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1096): warning: Register r12 already defined by the .DEF directive
E:\tic-tac-toe\Debug\List\tic-tac-toe.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _player=R4
                 	.DEF _player_msb=R5
                 	.DEF _count=R6
                 	.DEF _count_msb=R7
                 	.DEF _state=R8
                 	.DEF _state_msb=R9
                 	.DEF _r=R10
                 	.DEF _r_msb=R11
                 	.DEF _c=R12
                 	.DEF _c_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0081 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 fdfe
000034 f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x4:
000035 5b06      	.DB  0x6,0x5B
                 _0x0:
000036 5400
000037 6369
000038 6154
000039 5463      	.DB  0x0,0x54,0x69,0x63,0x54,0x61,0x63,0x54
00003a 656f
00003b 4720
00003c 6d61
00003d 0a65      	.DB  0x6F,0x65,0x20,0x47,0x61,0x6D,0x65,0xA
00003e 7250
00003f 7365
000040 2073
000041 4e4f      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x4F,0x4E
000042 7420
000043 206f
000044 7453
000045 7261      	.DB  0x20,0x74,0x6F,0x20,0x53,0x74,0x61,0x72
000046 2e74
000047 2e2e
000048 4700
000049 6d61      	.DB  0x74,0x2E,0x2E,0x2E,0x0,0x47,0x61,0x6D
00004a 2065
00004b 7453
00004c 7261
00004d 7374      	.DB  0x65,0x20,0x53,0x74,0x61,0x72,0x74,0x73
00004e 6920
00004f 3a6e
000050 6425
000051 5000      	.DB  0x20,0x69,0x6E,0x3A,0x25,0x64,0x0,0x50
000052 616c
000053 6579
000054 2072
000055 2058      	.DB  0x6C,0x61,0x79,0x65,0x72,0x20,0x58,0x20
000056 6977
000057 736e
000058 0021
000059 6c50      	.DB  0x77,0x69,0x6E,0x73,0x21,0x0,0x50,0x6C
00005a 7961
00005b 7265
00005c 4f20
00005d 7720      	.DB  0x61,0x79,0x65,0x72,0x20,0x4F,0x20,0x77
00005e 6e69
00005f 2173
000060 4900
000061 7374      	.DB  0x69,0x6E,0x73,0x21,0x0,0x49,0x74,0x73
000062 6120
000063 4420
000064 6172
000065 2177      	.DB  0x20,0x61,0x20,0x44,0x72,0x61,0x77,0x21
000066 0021      	.DB  0x21,0x0
                 _0x2000003:
000067 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000068 0004      	.DW  0x04
000069 01d4      	.DW  _row
00006a 0066      	.DW  _0x3*2
                 
00006b 0002      	.DW  0x02
00006c 01ec      	.DW  _num
00006d 006a      	.DW  _0x4*2
                 
00006e 0001      	.DW  0x01
00006f 0160      	.DW  _0x1C
000070 006c      	.DW  _0x0*2
                 
000071 0024      	.DW  0x24
000072 0161      	.DW  _0x1C+1
000073 006d      	.DW  _0x0*2+1
                 
000074 000f      	.DW  0x0F
000075 0185      	.DW  _0x55
000076 00a3      	.DW  _0x0*2+55
                 
000077 000f      	.DW  0x0F
000078 0194      	.DW  _0x55+15
000079 00b2      	.DW  _0x0*2+70
                 
00007a 000d      	.DW  0x0D
00007b 01a3      	.DW  _0x55+30
00007c 00c1      	.DW  _0x0*2+85
                 
00007d 0002      	.DW  0x02
00007e 01ee      	.DW  __base_y_G100
00007f 00ce      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000080 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000081 94f8      	CLI
000082 27ee      	CLR  R30
000083 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000084 e0f1      	LDI  R31,1
000085 bffb      	OUT  GICR,R31
000086 bfeb      	OUT  GICR,R30
000087 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000088 e08d      	LDI  R24,(14-2)+1
000089 e0a2      	LDI  R26,2
00008a 27bb      	CLR  R27
                 __CLEAR_REG:
00008b 93ed      	ST   X+,R30
00008c 958a      	DEC  R24
00008d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000090 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000091 93ed      	ST   X+,R30
000092 9701      	SBIW R24,1
000093 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000094 ede0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000095 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000096 9185      	LPM  R24,Z+
000097 9195      	LPM  R25,Z+
000098 9700      	SBIW R24,0
000099 f061      	BREQ __GLOBAL_INI_END
00009a 91a5      	LPM  R26,Z+
00009b 91b5      	LPM  R27,Z+
00009c 9005      	LPM  R0,Z+
00009d 9015      	LPM  R1,Z+
00009e 01bf      	MOVW R22,R30
00009f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a0 9005      	LPM  R0,Z+
0000a1 920d      	ST   X+,R0
0000a2 9701      	SBIW R24,1
0000a3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a4 01fb      	MOVW R30,R22
0000a5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a6 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a7 bfed      	OUT  SPL,R30
0000a8 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a9 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000aa e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ab e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ac 940c 01ed 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * tic-tac-toe.c
                 ; * Author: Sarvenaz
                 ; */
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <lcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;
                 ;#asm
                     .equ __lcd_port=0x12
                 ; 0000 000D #endasm
                 ;
                 ;// global variable
                 ;
                 ;int game[3][3];
                 ;int win[8];
                 ;int player, count, state, r, c, k;
                 ;unsigned char row[4]={0xFE, 0xFD, 0xFB, 0xF7};
                 
                 	.DSEG
                 ;char txt[20];
                 ;unsigned char num[2]={0x06, 0x5B};
                 ;
                 ;void keypad()
                 ; 0000 0019 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 001A     while(1)
                 _0x5:
                 ; 0000 001B     {
                 ; 0000 001C         for(r=0; r<4; r++)
0000ae 24aa      	CLR  R10
0000af 24bb      	CLR  R11
                 _0x9:
0000b0 e0e4      	LDI  R30,LOW(4)
0000b1 e0f0      	LDI  R31,HIGH(4)
0000b2 16ae      	CP   R10,R30
0000b3 06bf      	CPC  R11,R31
0000b4 f594      	BRGE _0xA
                 ; 0000 001D         {
                 ; 0000 001E             c=4;
0000b5 016f      	MOVW R12,R30
                 ; 0000 001F             PORTC=row[r];
0000b6 eda4      	LDI  R26,LOW(_row)
0000b7 e0b1      	LDI  R27,HIGH(_row)
0000b8 0daa      	ADD  R26,R10
0000b9 1dbb      	ADC  R27,R11
0000ba 91ec      	LD   R30,X
0000bb bbe5      	OUT  0x15,R30
                 ; 0000 0020             DDRC=0x0F;
0000bc e0ef      	LDI  R30,LOW(15)
0000bd bbe4      	OUT  0x14,R30
                 ; 0000 0021             if(PINC.4 == 0)
0000be 999c      	SBIC 0x13,4
0000bf c002      	RJMP _0xB
                 ; 0000 0022                 c=0;
0000c0 24cc      	CLR  R12
0000c1 24dd      	CLR  R13
                 ; 0000 0023             if(PINC.5 == 0)
                 _0xB:
0000c2 999d      	SBIC 0x13,5
0000c3 c003      	RJMP _0xC
                 ; 0000 0024                 c=1;
0000c4 e0e1      	LDI  R30,LOW(1)
0000c5 e0f0      	LDI  R31,HIGH(1)
0000c6 016f      	MOVW R12,R30
                 ; 0000 0025             if(PINC.6 == 0)
                 _0xC:
0000c7 999e      	SBIC 0x13,6
0000c8 c003      	RJMP _0xD
                 ; 0000 0026                 c=2;
0000c9 e0e2      	LDI  R30,LOW(2)
0000ca e0f0      	LDI  R31,HIGH(2)
0000cb 016f      	MOVW R12,R30
                 ; 0000 0027             if(PINC.7 == 0)
                 _0xD:
0000cc 999f      	SBIC 0x13,7
0000cd c003      	RJMP _0xE
                 ; 0000 0028                 c=3;
0000ce e0e3      	LDI  R30,LOW(3)
0000cf e0f0      	LDI  R31,HIGH(3)
0000d0 016f      	MOVW R12,R30
                 ; 0000 0029             if(!(c == 4))
                 _0xE:
0000d1 e0e4      	LDI  R30,LOW(4)
0000d2 e0f0      	LDI  R31,HIGH(4)
0000d3 15ec      	CP   R30,R12
0000d4 05fd      	CPC  R31,R13
0000d5 f049      	BREQ _0xF
                 ; 0000 002A             {
                 ; 0000 002B                 while(PINC.4 == 0);
                 _0x10:
0000d6 9b9c      	SBIS 0x13,4
0000d7 cffe      	RJMP _0x10
                 ; 0000 002C                 while(PINC.5 == 0);
                 _0x13:
0000d8 9b9d      	SBIS 0x13,5
0000d9 cffe      	RJMP _0x13
                 ; 0000 002D                 while(PINC.6 == 0);
                 _0x16:
0000da 9b9e      	SBIS 0x13,6
0000db cffe      	RJMP _0x16
                 ; 0000 002E                 while(PINC.7 == 0);
                 _0x19:
0000dc 9b9f      	SBIS 0x13,7
0000dd cffe      	RJMP _0x19
                 ; 0000 002F                 return;
0000de 9508      	RET
                 ; 0000 0030             }
                 ; 0000 0031             delay_ms(5);
                 _0xF:
0000df e0a5      	LDI  R26,LOW(5)
0000e0 e0b0      	LDI  R27,0
0000e1 940e 05c5 	CALL _delay_ms
                 ; 0000 0032         }
0000e3 01f5      	MOVW R30,R10
0000e4 9631      	ADIW R30,1
0000e5 015f      	MOVW R10,R30
0000e6 cfc9      	RJMP _0x9
                 _0xA:
                 ; 0000 0033     }
0000e7 cfc6      	RJMP _0x5
                 ; 0000 0034 }
                 ; .FEND
                 ;
                 ;void init()
                 ; 0000 0037 {
                 _init:
                 ; .FSTART _init
                 ; 0000 0038     player=0;
0000e8 2444      	CLR  R4
0000e9 2455      	CLR  R5
                 ; 0000 0039     count=0;
0000ea 2466      	CLR  R6
0000eb 2477      	CLR  R7
                 ; 0000 003A     state=0;
0000ec 2488      	CLR  R8
0000ed 2499      	CLR  R9
                 ; 0000 003B     strcpy(txt, "");
0000ee ede8      	LDI  R30,LOW(_txt)
0000ef e0f1      	LDI  R31,HIGH(_txt)
0000f0 93fa      	ST   -Y,R31
0000f1 93ea      	ST   -Y,R30
                +
0000f2 e6a0     +LDI R26 , LOW ( _0x1C + ( 0 ) )
0000f3 e0b1     +LDI R27 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW2MN _0x1C,0
0000f4 940e 051a 	CALL _strcpy
                 ; 0000 003C     for(r=0; r<3; r++)
0000f6 24aa      	CLR  R10
0000f7 24bb      	CLR  R11
                 _0x1E:
0000f8 940e 0540 	CALL SUBOPT_0x0
0000fa f48c      	BRGE _0x1F
                 ; 0000 003D         for(c=0; c<3; c++)
0000fb 24cc      	CLR  R12
0000fc 24dd      	CLR  R13
                 _0x21:
0000fd 940e 0545 	CALL SUBOPT_0x1
0000ff f444      	BRGE _0x22
                 ; 0000 003E             game[r][c]=0;                           // initialing game array
000100 940e 054a 	CALL SUBOPT_0x2
000102 940e 0558 	CALL SUBOPT_0x3
000104 01f6      	MOVW R30,R12
000105 9631      	ADIW R30,1
000106 016f      	MOVW R12,R30
000107 cff5      	RJMP _0x21
                 _0x22:
                 ; 0000 003F for(r=0; r<8; r++)
000108 01f5      	MOVW R30,R10
000109 9631      	ADIW R30,1
00010a 015f      	MOVW R10,R30
00010b cfec      	RJMP _0x1E
                 _0x1F:
00010c 24aa      	CLR  R10
00010d 24bb      	CLR  R11
                 _0x24:
00010e 940e 055d 	CALL SUBOPT_0x4
000110 f434      	BRGE _0x25
                 ; 0000 0040         win[r]=0;                                   // initialing win array
000111 940e 0562 	CALL SUBOPT_0x5
000113 01f5      	MOVW R30,R10
000114 9631      	ADIW R30,1
000115 015f      	MOVW R10,R30
000116 cff7      	RJMP _0x24
                 _0x25:
                 ; 0000 0041 r=0;
000117 24aa      	CLR  R10
000118 24bb      	CLR  R11
                 ; 0000 0042     c=0;
000119 24cc      	CLR  R12
00011a 24dd      	CLR  R13
                 ; 0000 0043     lcd_clear();
00011b 940e 02e2 	CALL _lcd_clear
                 ; 0000 0044     lcd_puts("TicTacToe Game\nPress ON to Start...");
                +
00011d e6a1     +LDI R26 , LOW ( _0x1C + ( 1 ) )
00011e e0b1     +LDI R27 , HIGH ( _0x1C + ( 1 ) )
                 	__POINTW2MN _0x1C,1
00011f 940e 031e 	CALL _lcd_puts
                 ; 0000 0045     do{
                 _0x27:
                 ; 0000 0046         keypad();
000121 940e 056a 	CALL SUBOPT_0x6
                 ; 0000 0047         k=r * 4 + c;
                 ; 0000 0048     } while(k != 12);
000123 940e 0576 	CALL SUBOPT_0x7
000125 971c      	SBIW R26,12
000126 f7d1      	BRNE _0x27
                 ; 0000 0049     lcd_clear();
000127 940e 02e2 	CALL _lcd_clear
                 ; 0000 004A     for(r=3; r>0; r--)
000129 e0e3      	LDI  R30,LOW(3)
00012a e0f0      	LDI  R31,HIGH(3)
00012b 015f      	MOVW R10,R30
                 _0x2A:
00012c 2400      	CLR  R0
00012d 140a      	CP   R0,R10
00012e 040b      	CPC  R0,R11
00012f f4fc      	BRGE _0x2B
                 ; 0000 004B     {
                 ; 0000 004C         sprintf(txt, "Game Starts in:%d", r);
000130 ede8      	LDI  R30,LOW(_txt)
000131 e0f1      	LDI  R31,HIGH(_txt)
000132 93fa      	ST   -Y,R31
000133 93ea      	ST   -Y,R30
                +
000134 e9e1     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
000135 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
000136 93fa      	ST   -Y,R31
000137 93ea      	ST   -Y,R30
000138 01f5      	MOVW R30,R10
000139 940e 05dc 	CALL __CWD1
00013b 940e 05f6 	CALL __PUTPARD1
00013d e084      	LDI  R24,4
00013e 940e 04e6 	CALL _sprintf
000140 9628      	ADIW R28,8
                 ; 0000 004D         lcd_puts(txt);
000141 eda8      	LDI  R26,LOW(_txt)
000142 e0b1      	LDI  R27,HIGH(_txt)
000143 940e 031e 	CALL _lcd_puts
                 ; 0000 004E         delay_ms(100);
000145 e6a4      	LDI  R26,LOW(100)
000146 e0b0      	LDI  R27,0
000147 940e 05c5 	CALL _delay_ms
                 ; 0000 004F         lcd_clear();
000149 940e 02e2 	CALL _lcd_clear
                 ; 0000 0050     }
00014b 01f5      	MOVW R30,R10
00014c 9731      	SBIW R30,1
00014d 015f      	MOVW R10,R30
00014e cfdd      	RJMP _0x2A
                 _0x2B:
                 ; 0000 0051     PORTA=num[player];
00014f 940e 057b 	CALL SUBOPT_0x8
                 ; 0000 0052 }
000151 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1C:
000160           	.BYTE 0x25
                 ;
                 ;void showBoard()
                 ; 0000 0055 {
                 
                 	.CSEG
                 _showBoard:
                 ; .FSTART _showBoard
                 ; 0000 0056     lcd_clear();
000152 940e 02e2 	CALL _lcd_clear
                 ; 0000 0057     for(r=0; r<3; r++)
000154 24aa      	CLR  R10
000155 24bb      	CLR  R11
                 _0x2D:
000156 940e 0540 	CALL SUBOPT_0x0
000158 f544      	BRGE _0x2E
                 ; 0000 0058         for(c=0; c<3; c++)
000159 24cc      	CLR  R12
00015a 24dd      	CLR  R13
                 _0x30:
00015b 940e 0545 	CALL SUBOPT_0x1
00015d f4fc      	BRGE _0x31
                 ; 0000 0059         {
                 ; 0000 005A             lcd_gotoxy(c, r);
00015e 92ca      	ST   -Y,R12
00015f 2daa      	MOV  R26,R10
000160 940e 02ce 	CALL _lcd_gotoxy
                 ; 0000 005B             if(game[r][c] == 1)
000162 940e 054a 	CALL SUBOPT_0x2
000164 940e 05ee 	CALL __GETW1P
000166 30e1      	CPI  R30,LOW(0x1)
000167 e0a0      	LDI  R26,HIGH(0x1)
000168 07fa      	CPC  R31,R26
000169 f411      	BRNE _0x32
                 ; 0000 005C                 lcd_putchar('X');
00016a e5a8      	LDI  R26,LOW(88)
00016b c00b      	RJMP _0x5F
                 ; 0000 005D             else if(game[r][c] == -1)
                 _0x32:
00016c 940e 054a 	CALL SUBOPT_0x2
00016e 940e 05ee 	CALL __GETW1P
000170 3fef      	CPI  R30,LOW(0xFFFF)
000171 efaf      	LDI  R26,HIGH(0xFFFF)
000172 07fa      	CPC  R31,R26
000173 f411      	BRNE _0x34
                 ; 0000 005E                 lcd_putchar('O');
000174 e4af      	LDI  R26,LOW(79)
000175 c001      	RJMP _0x5F
                 ; 0000 005F             else
                 _0x34:
                 ; 0000 0060                 lcd_putchar('-');
000176 e2ad      	LDI  R26,LOW(45)
                 _0x5F:
000177 940e 02f7 	CALL _lcd_putchar
                 ; 0000 0061         }
000179 01f6      	MOVW R30,R12
00017a 9631      	ADIW R30,1
00017b 016f      	MOVW R12,R30
00017c cfde      	RJMP _0x30
                 _0x31:
00017d 01f5      	MOVW R30,R10
00017e 9631      	ADIW R30,1
00017f 015f      	MOVW R10,R30
000180 cfd5      	RJMP _0x2D
                 _0x2E:
                 ; 0000 0062 }
000181 9508      	RET
                 ; .FEND
                 ;
                 ;void winnerCheck()
                 ; 0000 0065 {
                 _winnerCheck:
                 ; .FSTART _winnerCheck
                 ; 0000 0066     for(r=0; r<8; r++)
000182 24aa      	CLR  R10
000183 24bb      	CLR  R11
                 _0x37:
000184 940e 055d 	CALL SUBOPT_0x4
000186 f434      	BRGE _0x38
                 ; 0000 0067         win[r] = 0;
000187 940e 0562 	CALL SUBOPT_0x5
000189 01f5      	MOVW R30,R10
00018a 9631      	ADIW R30,1
00018b 015f      	MOVW R10,R30
00018c cff7      	RJMP _0x37
                 _0x38:
                 ; 0000 0068 for(r=0; r<3; r++)
00018d 24aa      	CLR  R10
00018e 24bb      	CLR  R11
                 _0x3A:
00018f 940e 0540 	CALL SUBOPT_0x0
000191 f00c      	BRLT PC+2
000192 c059      	RJMP _0x3B
                 ; 0000 0069         for(c=0; c<3; c++)
000193 24cc      	CLR  R12
000194 24dd      	CLR  R13
                 _0x3D:
000195 940e 0545 	CALL SUBOPT_0x1
000197 f00c      	BRLT PC+2
000198 c04f      	RJMP _0x3E
                 ; 0000 006A         {
                 ; 0000 006B             win[r]+=game[r][c];
000199 940e 0582 	CALL SUBOPT_0x9
00019b 0fea      	ADD  R30,R26
00019c 1ffb      	ADC  R31,R27
00019d 01cf      	MOVW R24,R30
00019e 8160      	LD   R22,Z
00019f 8171      	LDD  R23,Z+1
0001a0 940e 054a 	CALL SUBOPT_0x2
0001a2 940e 0588 	CALL SUBOPT_0xA
                 ; 0000 006C             win[r+3]+=game[c][r];
0001a4 01f5      	MOVW R30,R10
0001a5 9633      	ADIW R30,3
0001a6 eca2      	LDI  R26,LOW(_win)
0001a7 e0b1      	LDI  R27,HIGH(_win)
0001a8 0fee      	LSL  R30
0001a9 1fff      	ROL  R31
0001aa 0fea      	ADD  R30,R26
0001ab 1ffb      	ADC  R31,R27
0001ac 01cf      	MOVW R24,R30
0001ad 8160      	LD   R22,Z
0001ae 8171      	LDD  R23,Z+1
0001af 01f6      	MOVW R30,R12
0001b0 e0a6      	LDI  R26,LOW(6)
0001b1 e0b0      	LDI  R27,HIGH(6)
0001b2 940e 05e6 	CALL __MULW12U
0001b4 55e0      	SUBI R30,LOW(-_game)
0001b5 4ffe      	SBCI R31,HIGH(-_game)
0001b6 01df      	MOVW R26,R30
0001b7 01f5      	MOVW R30,R10
0001b8 0fee      	LSL  R30
0001b9 1fff      	ROL  R31
0001ba 0fae      	ADD  R26,R30
0001bb 1fbf      	ADC  R27,R31
0001bc 940e 0588 	CALL SUBOPT_0xA
                 ; 0000 006D             if(r == c)
                +
0001be 14ca     +CP R12 , R10
0001bf 04db     +CPC R13 , R11
                 	__CPWRR 12,13,10,11
0001c0 f471      	BRNE _0x3F
                 ; 0000 006E                 win[6]+=game[r][c];
0001c1 940e 054a 	CALL SUBOPT_0x2
0001c3 940e 05ee 	CALL __GETW1P
                +
0001c5 91a0 01ce+LDS R26 , _win + ( 12 )
0001c7 91b0 01cf+LDS R27 , _win + ( 12 ) + 1
                 	__GETW2MN _win,12
0001c9 0fea      	ADD  R30,R26
0001ca 1ffb      	ADC  R31,R27
                +
0001cb 93e0 01ce+STS _win + ( 12 ) , R30
0001cd 93f0 01cf+STS _win + ( 12 ) + 1 , R31
                 	__PUTW1MN _win,12
                 ; 0000 006F             if(r+c == 2)
                 _0x3F:
0001cf 01f6      	MOVW R30,R12
0001d0 0dea      	ADD  R30,R10
0001d1 1dfb      	ADC  R31,R11
0001d2 30e2      	CPI  R30,LOW(0x2)
0001d3 e0a0      	LDI  R26,HIGH(0x2)
0001d4 07fa      	CPC  R31,R26
0001d5 f471      	BRNE _0x40
                 ; 0000 0070                 win[7]+=game[r][c];
0001d6 940e 054a 	CALL SUBOPT_0x2
0001d8 940e 05ee 	CALL __GETW1P
                +
0001da 91a0 01d0+LDS R26 , _win + ( 14 )
0001dc 91b0 01d1+LDS R27 , _win + ( 14 ) + 1
                 	__GETW2MN _win,14
0001de 0fea      	ADD  R30,R26
0001df 1ffb      	ADC  R31,R27
                +
0001e0 93e0 01d0+STS _win + ( 14 ) , R30
0001e2 93f0 01d1+STS _win + ( 14 ) + 1 , R31
                 	__PUTW1MN _win,14
                 ; 0000 0071         }
                 _0x40:
0001e4 01f6      	MOVW R30,R12
0001e5 9631      	ADIW R30,1
0001e6 016f      	MOVW R12,R30
0001e7 cfad      	RJMP _0x3D
                 _0x3E:
0001e8 01f5      	MOVW R30,R10
0001e9 9631      	ADIW R30,1
0001ea 015f      	MOVW R10,R30
0001eb cfa3      	RJMP _0x3A
                 _0x3B:
                 ; 0000 0072 }
0001ec 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0075 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0076     PORTC=0xFF;                         // initial value
0001ed efef      	LDI  R30,LOW(255)
0001ee bbe5      	OUT  0x15,R30
                 ; 0000 0077     DDRC=0x0F;                          // input / output
0001ef e0ef      	LDI  R30,LOW(15)
0001f0 bbe4      	OUT  0x14,R30
                 ; 0000 0078     PORTA=0x00;                        // initial value
0001f1 e0e0      	LDI  R30,LOW(0)
0001f2 bbeb      	OUT  0x1B,R30
                 ; 0000 0079     DDRA=0xFF;                          // output
0001f3 efef      	LDI  R30,LOW(255)
0001f4 bbea      	OUT  0x1A,R30
                 ; 0000 007A     lcd_init(20);
0001f5 e1a4      	LDI  R26,LOW(20)
0001f6 940e 0340 	CALL _lcd_init
                 ; 0000 007B     init();
0001f8 deef      	RCALL _init
                 ; 0000 007C     showBoard();
0001f9 df58      	RCALL _showBoard
                 ; 0000 007D     while(state == 0)
                 _0x41:
0001fa 2c08      	MOV  R0,R8
0001fb 2809      	OR   R0,R9
0001fc f009      	BREQ PC+2
0001fd c069      	RJMP _0x43
                 ; 0000 007E     {
                 ; 0000 007F         keypad();
0001fe deaf      	RCALL _keypad
                 ; 0000 0080         if(r != 3 && c != 3)
0001ff e0e3      	LDI  R30,LOW(3)
000200 e0f0      	LDI  R31,HIGH(3)
000201 15ea      	CP   R30,R10
000202 05fb      	CPC  R31,R11
000203 f019      	BREQ _0x45
000204 15ec      	CP   R30,R12
000205 05fd      	CPC  R31,R13
000206 f409      	BRNE _0x46
                 _0x45:
000207 c01e      	RJMP _0x44
                 _0x46:
                 ; 0000 0081         {
                 ; 0000 0082             if(game[r][c] == 0)
000208 940e 054a 	CALL SUBOPT_0x2
00020a 940e 05ee 	CALL __GETW1P
00020c 9730      	SBIW R30,0
00020d f4c1      	BRNE _0x47
                 ; 0000 0083             {
                 ; 0000 0084                 if(player == 0)
00020e 2c04      	MOV  R0,R4
00020f 2805      	OR   R0,R5
000210 f429      	BRNE _0x48
                 ; 0000 0085                     game[r][c] = 1;
000211 940e 054a 	CALL SUBOPT_0x2
000213 e0e1      	LDI  R30,LOW(1)
000214 e0f0      	LDI  R31,HIGH(1)
000215 c004      	RJMP _0x60
                 ; 0000 0086                 else
                 _0x48:
                 ; 0000 0087                     game[r][c] = -1;
000216 940e 054a 	CALL SUBOPT_0x2
000218 efef      	LDI  R30,LOW(65535)
000219 efff      	LDI  R31,HIGH(65535)
                 _0x60:
00021a 93ed      	ST   X+,R30
00021b 93fc      	ST   X,R31
                 ; 0000 0088                 player=!player;
00021c 01f2      	MOVW R30,R4
00021d 940e 05e1 	CALL __LNEGW1
00021f 2e4e      	MOV  R4,R30
000220 2455      	CLR  R5
                 ; 0000 0089                 PORTA=num[player];
000221 940e 057b 	CALL SUBOPT_0x8
                 ; 0000 008A                 count++;
000223 01f3      	MOVW R30,R6
000224 9631      	ADIW R30,1
000225 013f      	MOVW R6,R30
                 ; 0000 008B             }
                 ; 0000 008C         }
                 _0x47:
                 ; 0000 008D         k=r*4+c;
                 _0x44:
000226 01f5      	MOVW R30,R10
000227 940e 05d7 	CALL __LSLW2
000229 0dec      	ADD  R30,R12
00022a 1dfd      	ADC  R31,R13
00022b 93e0 01d2 	STS  _k,R30
00022d 93f0 01d3 	STS  _k+1,R31
                 ; 0000 008E         if(k == 13)
00022f 940e 0576 	CALL SUBOPT_0x7
000231 971d      	SBIW R26,13
000232 f409      	BRNE _0x4A
                 ; 0000 008F             init();
000233 deb4      	RCALL _init
                 ; 0000 0090         showBoard();
                 _0x4A:
000234 df1d      	RCALL _showBoard
                 ; 0000 0091         winnerCheck();
000235 df4c      	RCALL _winnerCheck
                 ; 0000 0092         for(r=0; r<8; r++)
000236 24aa      	CLR  R10
000237 24bb      	CLR  R11
                 _0x4C:
000238 940e 055d 	CALL SUBOPT_0x4
00023a f4f4      	BRGE _0x4D
                 ; 0000 0093             if(win[r] == 3)
00023b 940e 0582 	CALL SUBOPT_0x9
00023d 0fae      	ADD  R26,R30
00023e 1fbf      	ADC  R27,R31
00023f 940e 05ee 	CALL __GETW1P
000241 30e3      	CPI  R30,LOW(0x3)
000242 e0a0      	LDI  R26,HIGH(0x3)
000243 07fa      	CPC  R31,R26
000244 f419      	BRNE _0x4E
                 ; 0000 0094                 state = 1;
000245 e0e1      	LDI  R30,LOW(1)
000246 e0f0      	LDI  R31,HIGH(1)
000247 c00c      	RJMP _0x61
                 ; 0000 0095             else if(win[r] == -3)
                 _0x4E:
000248 940e 0582 	CALL SUBOPT_0x9
00024a 0fae      	ADD  R26,R30
00024b 1fbf      	ADC  R27,R31
00024c 940e 05ee 	CALL __GETW1P
00024e 3fed      	CPI  R30,LOW(0xFFFD)
00024f efaf      	LDI  R26,HIGH(0xFFFD)
000250 07fa      	CPC  R31,R26
000251 f419      	BRNE _0x50
                 ; 0000 0096                 state = -1;
000252 efef      	LDI  R30,LOW(65535)
000253 efff      	LDI  R31,HIGH(65535)
                 _0x61:
000254 014f      	MOVW R8,R30
                 ; 0000 0097         if(count == 9 && state == 0)
                 _0x50:
000255 01f5      	MOVW R30,R10
000256 9631      	ADIW R30,1
000257 015f      	MOVW R10,R30
000258 cfdf      	RJMP _0x4C
                 _0x4D:
000259 e0e9      	LDI  R30,LOW(9)
00025a e0f0      	LDI  R31,HIGH(9)
00025b 15e6      	CP   R30,R6
00025c 05f7      	CPC  R31,R7
00025d f421      	BRNE _0x52
00025e 2400      	CLR  R0
00025f 1408      	CP   R0,R8
000260 0409      	CPC  R0,R9
000261 f009      	BREQ _0x53
                 _0x52:
000262 c003      	RJMP _0x51
                 _0x53:
                 ; 0000 0098             state = 2;
000263 e0e2      	LDI  R30,LOW(2)
000264 e0f0      	LDI  R31,HIGH(2)
000265 014f      	MOVW R8,R30
                 ; 0000 0099     }
                 _0x51:
000266 cf93      	RJMP _0x41
                 _0x43:
                 ; 0000 009A     lcd_gotoxy(3,3);
000267 e0e3      	LDI  R30,LOW(3)
000268 93ea      	ST   -Y,R30
000269 e0a3      	LDI  R26,LOW(3)
00026a 940e 02ce 	CALL _lcd_gotoxy
                 ; 0000 009B     if(state == 1)
00026c e0e1      	LDI  R30,LOW(1)
00026d e0f0      	LDI  R31,HIGH(1)
00026e 15e8      	CP   R30,R8
00026f 05f9      	CPC  R31,R9
000270 f419      	BRNE _0x54
                 ; 0000 009C         lcd_puts("Player X wins!");
                +
000271 e8a5     +LDI R26 , LOW ( _0x55 + ( 0 ) )
000272 e0b1     +LDI R27 , HIGH ( _0x55 + ( 0 ) )
                 	__POINTW2MN _0x55,0
000273 c00f      	RJMP _0x62
                 ; 0000 009D     else if(state == -1)
                 _0x54:
000274 efef      	LDI  R30,LOW(65535)
000275 efff      	LDI  R31,HIGH(65535)
000276 15e8      	CP   R30,R8
000277 05f9      	CPC  R31,R9
000278 f419      	BRNE _0x57
                 ; 0000 009E         lcd_puts("Player O wins!");
                +
000279 e9a4     +LDI R26 , LOW ( _0x55 + ( 15 ) )
00027a e0b1     +LDI R27 , HIGH ( _0x55 + ( 15 ) )
                 	__POINTW2MN _0x55,15
00027b c007      	RJMP _0x62
                 ; 0000 009F     else if(state == 2)
                 _0x57:
00027c e0e2      	LDI  R30,LOW(2)
00027d e0f0      	LDI  R31,HIGH(2)
00027e 15e8      	CP   R30,R8
00027f 05f9      	CPC  R31,R9
000280 f421      	BRNE _0x59
                 ; 0000 00A0         lcd_puts("Its a Draw!!");
                +
000281 eaa3     +LDI R26 , LOW ( _0x55 + ( 30 ) )
000282 e0b1     +LDI R27 , HIGH ( _0x55 + ( 30 ) )
                 	__POINTW2MN _0x55,30
                 _0x62:
000283 940e 031e 	CALL _lcd_puts
                 ; 0000 00A1     while(1)
                 _0x59:
                 _0x5A:
                 ; 0000 00A2     {
                 ; 0000 00A3         keypad();
000285 940e 056a 	CALL SUBOPT_0x6
                 ; 0000 00A4         k=r*4+c;
                 ; 0000 00A5         if(k == 13)
000287 940e 0576 	CALL SUBOPT_0x7
000289 971d      	SBIW R26,13
00028a f409      	BRNE _0x5D
                 ; 0000 00A6             init();
00028b de5c      	RCALL _init
                 ; 0000 00A7     }
                 _0x5D:
00028c cff8      	RJMP _0x5A
                 ; 0000 00A8 }
                 _0x5E:
00028d cfff      	RJMP _0x5E
                 ; .FEND
                 
                 	.DSEG
                 _0x55:
000185           	.BYTE 0x2B
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
00028e e0ff          ldi   r31,15
                 __lcd_delay0:
00028f 95fa          dec   r31
000290 f7f1          brne  __lcd_delay0
000291 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000292 b3a1          in    r26,__lcd_direction
000293 70af          andi  r26,0xf                 ;set as input
000294 bba1          out   __lcd_direction,r26
000295 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000296 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000297 dff6      	RCALL __lcd_delay_G100
000298 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000299 dff4      	RCALL __lcd_delay_G100
00029a b3a0          in    r26,__lcd_pin
00029b 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00029c dff1      	RCALL __lcd_delay_G100
00029d 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00029e dfef      	RCALL __lcd_delay_G100
00029f 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0002a0 fda7          sbrc  r26,__lcd_busy_flag
0002a1 cff5          rjmp  __lcd_busy
0002a2 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002a3 7fa0          andi  r26,0xf0
0002a4 2bab          or    r26,r27
0002a5 bba2          out   __lcd_port,r26          ;write
0002a6 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0002a7 940e 028e 	CALL __lcd_delay_G100
0002a9 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0002aa 940e 028e 	CALL __lcd_delay_G100
0002ac 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002ad 93aa      	ST   -Y,R26
0002ae 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0002af b3a1          in    r26,__lcd_direction
0002b0 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0002b1 bba1          out   __lcd_direction,r26
0002b2 b3b2          in    r27,__lcd_port
0002b3 70bf          andi  r27,0xf
0002b4 81a8          ld    r26,y
0002b5 dfed      	RCALL __lcd_write_nibble_G100
0002b6 81a8          ld    r26,y
0002b7 95a2          swap  r26
0002b8 dfea      	RCALL __lcd_write_nibble_G100
0002b9 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0002ba 940c 0372 	JMP  _0x2080002
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0002bc 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0002bd 940e 028e 	CALL __lcd_delay_G100
0002bf b3e0          in    r30,__lcd_pin           ;read
0002c0 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0002c1 940e 028e 	CALL __lcd_delay_G100
0002c3 7fe0          andi  r30,0xf0
0002c4 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0002c5 940e 028e 	CALL __lcd_delay_G100
0002c7 dff4      	RCALL __lcd_read_nibble_G100
0002c8 2fae          mov   r26,r30
0002c9 dff2      	RCALL __lcd_read_nibble_G100
0002ca 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
0002cb 95e2          swap  r30
0002cc 2bea          or    r30,r26
0002cd 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002ce 93aa      	ST   -Y,R26
0002cf 940e 0292 	CALL __lcd_ready
0002d1 81e8      	LD   R30,Y
0002d2 e0f0      	LDI  R31,0
0002d3 51e2      	SUBI R30,LOW(-__base_y_G100)
0002d4 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0002d5 81e0      	LD   R30,Z
0002d6 81a9      	LDD  R26,Y+1
0002d7 0fae      	ADD  R26,R30
0002d8 940e 02ad 	CALL __lcd_write_data
0002da 81e9      	LDD  R30,Y+1
0002db 93e0 01f2 	STS  __lcd_x,R30
0002dd 81e8      	LD   R30,Y
0002de 93e0 01f3 	STS  __lcd_y,R30
0002e0 9622      	ADIW R28,2
0002e1 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002e2 940e 0292 	CALL __lcd_ready
0002e4 e0a2      	LDI  R26,LOW(2)
0002e5 940e 02ad 	CALL __lcd_write_data
0002e7 940e 0292 	CALL __lcd_ready
0002e9 e0ac      	LDI  R26,LOW(12)
0002ea 940e 02ad 	CALL __lcd_write_data
0002ec 940e 0292 	CALL __lcd_ready
0002ee e0a1      	LDI  R26,LOW(1)
0002ef 940e 02ad 	CALL __lcd_write_data
0002f1 e0e0      	LDI  R30,LOW(0)
0002f2 93e0 01f3 	STS  __lcd_y,R30
0002f4 93e0 01f2 	STS  __lcd_x,R30
0002f6 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002f7 93aa      	ST   -Y,R26
0002f8 93ef          push r30
0002f9 93ff          push r31
0002fa 81a8          ld   r26,y
0002fb 9468          set
0002fc 30aa          cpi  r26,10
0002fd f039          breq __lcd_putchar1
0002fe 94e8          clt
0002ff 91e0 01f4 	LDS  R30,__lcd_maxx
000301 91a0 01f2 	LDS  R26,__lcd_x
000303 17ae      	CP   R26,R30
000304 f058      	BRLO _0x2000004
                 	__lcd_putchar1:
000305 91e0 01f3 	LDS  R30,__lcd_y
000307 5fef      	SUBI R30,-LOW(1)
000308 93e0 01f3 	STS  __lcd_y,R30
00030a e0e0      	LDI  R30,LOW(0)
00030b 93ea      	ST   -Y,R30
00030c 91a0 01f3 	LDS  R26,__lcd_y
00030e dfbf      	RCALL _lcd_gotoxy
00030f f056      	brts __lcd_putchar0
                 _0x2000004:
000310 91e0 01f2 	LDS  R30,__lcd_x
000312 5fef      	SUBI R30,-LOW(1)
000313 93e0 01f2 	STS  __lcd_x,R30
000315 df7c          rcall __lcd_ready
000316 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
000317 81a8      	LD   R26,Y
000318 940e 02ad 	CALL __lcd_write_data
                 __lcd_putchar0:
00031a 91ff          pop  r31
00031b 91ef          pop  r30
00031c 940c 0372 	JMP  _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00031e 93ba      	ST   -Y,R27
00031f 93aa      	ST   -Y,R26
000320 931a      	ST   -Y,R17
                 _0x2000005:
000321 81a9      	LDD  R26,Y+1
000322 81ba      	LDD  R27,Y+1+1
000323 91ed      	LD   R30,X+
000324 83a9      	STD  Y+1,R26
000325 83ba      	STD  Y+1+1,R27
000326 2f1e      	MOV  R17,R30
000327 30e0      	CPI  R30,0
000328 f019      	BREQ _0x2000007
000329 2fa1      	MOV  R26,R17
00032a dfcc      	RCALL _lcd_putchar
00032b cff5      	RJMP _0x2000005
                 _0x2000007:
00032c 8118      	LDD  R17,Y+0
00032d 9623      	ADIW R28,3
00032e 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
00032f 27aa          clr   r26
000330 27bb          clr   r27
                 __long_delay0:
000331 9711          sbiw  r26,1         ;2 cycles
000332 f7f1          brne  __long_delay0 ;2 cycles
000333 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000334 93aa      	ST   -Y,R26
000335 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000336 b3a1          in    r26,__lcd_direction
000337 6fa7          ori   r26,0xf7                ;set as output
000338 bba1          out   __lcd_direction,r26
000339 b3b2          in    r27,__lcd_port
00033a 70bf          andi  r27,0xf
00033b 81a8          ld    r26,y
00033c 940e 02a3 	CALL __lcd_write_nibble_G100
00033e 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00033f c032      	RJMP _0x2080002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000340 93aa      	ST   -Y,R26
000341 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000342 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
000343 81e8      	LD   R30,Y
000344 93e0 01f4 	STS  __lcd_maxx,R30
000346 58e0      	SUBI R30,-LOW(128)
                +
000347 93e0 01f0+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000349 81e8      	LD   R30,Y
00034a 54e0      	SUBI R30,-LOW(192)
                +
00034b 93e0 01f1+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00034d 940e 0590 	CALL SUBOPT_0xB
00034f 940e 0590 	CALL SUBOPT_0xB
000351 940e 0590 	CALL SUBOPT_0xB
000353 dfdb      	RCALL __long_delay_G100
000354 e2a0      	LDI  R26,LOW(32)
000355 dfde      	RCALL __lcd_init_write_G100
000356 dfd8      	RCALL __long_delay_G100
000357 e2a8      	LDI  R26,LOW(40)
000358 940e 0595 	CALL SUBOPT_0xC
00035a e0a4      	LDI  R26,LOW(4)
00035b 940e 0595 	CALL SUBOPT_0xC
00035d e8a5      	LDI  R26,LOW(133)
00035e 940e 0595 	CALL SUBOPT_0xC
000360 b3a1          in    r26,__lcd_direction
000361 70af          andi  r26,0xf                 ;set as input
000362 bba1          out   __lcd_direction,r26
000363 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000364 940e 02c5 	CALL _lcd_read_byte0_G100
000366 30e5      	CPI  R30,LOW(0x5)
000367 f011      	BREQ _0x200000B
000368 e0e0      	LDI  R30,LOW(0)
000369 c008      	RJMP _0x2080002
                 _0x200000B:
00036a 940e 0292 	CALL __lcd_ready
00036c e0a6      	LDI  R26,LOW(6)
00036d 940e 02ad 	CALL __lcd_write_data
00036f 940e 02e2 	CALL _lcd_clear
000371 e0e1      	LDI  R30,LOW(1)
                 _0x2080002:
000372 9621      	ADIW R28,1
000373 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000374 93ba      	ST   -Y,R27
000375 93aa      	ST   -Y,R26
000376 931a      	ST   -Y,R17
000377 930a      	ST   -Y,R16
000378 81aa      	LDD  R26,Y+2
000379 81bb      	LDD  R27,Y+2+1
00037a 9612      	ADIW R26,2
00037b 940e 05ee 	CALL __GETW1P
00037d 9730      	SBIW R30,0
00037e f159      	BREQ _0x2020010
00037f 81aa      	LDD  R26,Y+2
000380 81bb      	LDD  R27,Y+2+1
000381 9614      	ADIW R26,4
000382 940e 05ee 	CALL __GETW1P
000384 018f      	MOVW R16,R30
000385 9730      	SBIW R30,0
000386 f061      	BREQ _0x2020012
                +
000387 3002     +CPI R16 , LOW ( 2 )
000388 e0e0     +LDI R30 , HIGH ( 2 )
000389 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00038a f098      	BRLO _0x2020013
00038b 01f8      	MOVW R30,R16
00038c 9731      	SBIW R30,1
00038d 018f      	MOVW R16,R30
                +
00038e 81aa     +LDD R26 , Y + 2
00038f 81bb     +LDD R27 , Y + 2 + 1
000390 9614     +ADIW R26 , 4
000391 93ed     +ST X + , R30
000392 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000393 81aa      	LDD  R26,Y+2
000394 81bb      	LDD  R27,Y+2+1
000395 9612      	ADIW R26,2
000396 91ed      	LD   R30,X+
000397 91fd      	LD   R31,X+
000398 9631      	ADIW R30,1
000399 93fe      	ST   -X,R31
00039a 93ee      	ST   -X,R30
00039b 9731      	SBIW R30,1
00039c 81ac      	LDD  R26,Y+4
00039d 83a0      	STD  Z+0,R26
                 _0x2020013:
00039e 81aa      	LDD  R26,Y+2
00039f 81bb      	LDD  R27,Y+2+1
0003a0 940e 05ee 	CALL __GETW1P
0003a2 23ff      	TST  R31
0003a3 f02a      	BRMI _0x2020014
0003a4 91ed      	LD   R30,X+
0003a5 91fd      	LD   R31,X+
0003a6 9631      	ADIW R30,1
0003a7 93fe      	ST   -X,R31
0003a8 93ee      	ST   -X,R30
                 _0x2020014:
0003a9 c006      	RJMP _0x2020015
                 _0x2020010:
0003aa 81aa      	LDD  R26,Y+2
0003ab 81bb      	LDD  R27,Y+2+1
0003ac efef      	LDI  R30,LOW(65535)
0003ad efff      	LDI  R31,HIGH(65535)
0003ae 93ed      	ST   X+,R30
0003af 93fc      	ST   X,R31
                 _0x2020015:
0003b0 8119      	LDD  R17,Y+1
0003b1 8108      	LDD  R16,Y+0
0003b2 9625      	ADIW R28,5
0003b3 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0003b4 93ba      	ST   -Y,R27
0003b5 93aa      	ST   -Y,R26
0003b6 9726      	SBIW R28,6
0003b7 940e 05fb 	CALL __SAVELOCR6
0003b9 e010      	LDI  R17,0
0003ba 85ac      	LDD  R26,Y+12
0003bb 85bd      	LDD  R27,Y+12+1
0003bc 940e 0558 	CALL SUBOPT_0x3
                 _0x2020016:
0003be 89ea      	LDD  R30,Y+18
0003bf 89fb      	LDD  R31,Y+18+1
0003c0 9631      	ADIW R30,1
0003c1 8bea      	STD  Y+18,R30
0003c2 8bfb      	STD  Y+18+1,R31
0003c3 9731      	SBIW R30,1
0003c4 91e4      	LPM  R30,Z
0003c5 2f2e      	MOV  R18,R30
0003c6 30e0      	CPI  R30,0
0003c7 f409      	BRNE PC+2
0003c8 c115      	RJMP _0x2020018
0003c9 2fe1      	MOV  R30,R17
0003ca 30e0      	CPI  R30,0
0003cb f439      	BRNE _0x202001C
0003cc 3225      	CPI  R18,37
0003cd f411      	BRNE _0x202001D
0003ce e011      	LDI  R17,LOW(1)
0003cf c002      	RJMP _0x202001E
                 _0x202001D:
0003d0 940e 0599 	CALL SUBOPT_0xD
                 _0x202001E:
0003d2 c10a      	RJMP _0x202001B
                 _0x202001C:
0003d3 30e1      	CPI  R30,LOW(0x1)
0003d4 f4a9      	BRNE _0x202001F
0003d5 3225      	CPI  R18,37
0003d6 f419      	BRNE _0x2020020
0003d7 940e 0599 	CALL SUBOPT_0xD
0003d9 c102      	RJMP _0x20200CC
                 _0x2020020:
0003da e012      	LDI  R17,LOW(2)
0003db e040      	LDI  R20,LOW(0)
0003dc e000      	LDI  R16,LOW(0)
0003dd 322d      	CPI  R18,45
0003de f411      	BRNE _0x2020021
0003df e001      	LDI  R16,LOW(1)
0003e0 c0fc      	RJMP _0x202001B
                 _0x2020021:
0003e1 322b      	CPI  R18,43
0003e2 f411      	BRNE _0x2020022
0003e3 e24b      	LDI  R20,LOW(43)
0003e4 c0f8      	RJMP _0x202001B
                 _0x2020022:
0003e5 3220      	CPI  R18,32
0003e6 f411      	BRNE _0x2020023
0003e7 e240      	LDI  R20,LOW(32)
0003e8 c0f4      	RJMP _0x202001B
                 _0x2020023:
0003e9 c002      	RJMP _0x2020024
                 _0x202001F:
0003ea 30e2      	CPI  R30,LOW(0x2)
0003eb f439      	BRNE _0x2020025
                 _0x2020024:
0003ec e050      	LDI  R21,LOW(0)
0003ed e013      	LDI  R17,LOW(3)
0003ee 3320      	CPI  R18,48
0003ef f411      	BRNE _0x2020026
0003f0 6800      	ORI  R16,LOW(128)
0003f1 c0eb      	RJMP _0x202001B
                 _0x2020026:
0003f2 c003      	RJMP _0x2020027
                 _0x2020025:
0003f3 30e3      	CPI  R30,LOW(0x3)
0003f4 f009      	BREQ PC+2
0003f5 c0e7      	RJMP _0x202001B
                 _0x2020027:
0003f6 3320      	CPI  R18,48
0003f7 f010      	BRLO _0x202002A
0003f8 332a      	CPI  R18,58
0003f9 f008      	BRLO _0x202002B
                 _0x202002A:
0003fa c007      	RJMP _0x2020029
                 _0x202002B:
0003fb e0aa      	LDI  R26,LOW(10)
0003fc 9f5a      	MUL  R21,R26
0003fd 2d50      	MOV  R21,R0
0003fe 2fe2      	MOV  R30,R18
0003ff 53e0      	SUBI R30,LOW(48)
000400 0f5e      	ADD  R21,R30
000401 c0db      	RJMP _0x202001B
                 _0x2020029:
000402 2fe2      	MOV  R30,R18
000403 36e3      	CPI  R30,LOW(0x63)
000404 f449      	BRNE _0x202002F
000405 940e 05a0 	CALL SUBOPT_0xE
000407 89e8      	LDD  R30,Y+16
000408 89f9      	LDD  R31,Y+16+1
000409 81a4      	LDD  R26,Z+4
00040a 93aa      	ST   -Y,R26
00040b 940e 05a6 	CALL SUBOPT_0xF
00040d c0ce      	RJMP _0x2020030
                 _0x202002F:
00040e 37e3      	CPI  R30,LOW(0x73)
00040f f441      	BRNE _0x2020032
000410 940e 05a0 	CALL SUBOPT_0xE
000412 940e 05ac 	CALL SUBOPT_0x10
000414 940e 0527 	CALL _strlen
000416 2f1e      	MOV  R17,R30
000417 c00a      	RJMP _0x2020033
                 _0x2020032:
000418 37e0      	CPI  R30,LOW(0x70)
000419 f461      	BRNE _0x2020035
00041a 940e 05a0 	CALL SUBOPT_0xE
00041c 940e 05ac 	CALL SUBOPT_0x10
00041e 940e 0533 	CALL _strlenf
000420 2f1e      	MOV  R17,R30
000421 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000422 6002      	ORI  R16,LOW(2)
000423 770f      	ANDI R16,LOW(127)
000424 e030      	LDI  R19,LOW(0)
000425 c034      	RJMP _0x2020036
                 _0x2020035:
000426 36e4      	CPI  R30,LOW(0x64)
000427 f011      	BREQ _0x2020039
000428 36e9      	CPI  R30,LOW(0x69)
000429 f411      	BRNE _0x202003A
                 _0x2020039:
00042a 6004      	ORI  R16,LOW(4)
00042b c002      	RJMP _0x202003B
                 _0x202003A:
00042c 37e5      	CPI  R30,LOW(0x75)
00042d f431      	BRNE _0x202003C
                 _0x202003B:
00042e e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00042f e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000430 83ee      	STD  Y+6,R30
000431 83ff      	STD  Y+6+1,R31
000432 e015      	LDI  R17,LOW(5)
000433 c00c      	RJMP _0x202003D
                 _0x202003C:
000434 35e8      	CPI  R30,LOW(0x58)
000435 f411      	BRNE _0x202003F
000436 6008      	ORI  R16,LOW(8)
000437 c003      	RJMP _0x2020040
                 _0x202003F:
000438 37e8      	CPI  R30,LOW(0x78)
000439 f009      	BREQ PC+2
00043a c0a1      	RJMP _0x2020071
                 _0x2020040:
00043b e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00043c e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00043d 83ee      	STD  Y+6,R30
00043e 83ff      	STD  Y+6+1,R31
00043f e014      	LDI  R17,LOW(4)
                 _0x202003D:
000440 ff02      	SBRS R16,2
000441 c014      	RJMP _0x2020042
000442 940e 05a0 	CALL SUBOPT_0xE
000444 940e 05b6 	CALL SUBOPT_0x11
000446 85ab      	LDD  R26,Y+11
000447 23aa      	TST  R26
000448 f43a      	BRPL _0x2020043
000449 85ea      	LDD  R30,Y+10
00044a 85fb      	LDD  R31,Y+10+1
00044b 940e 05d3 	CALL __ANEGW1
00044d 87ea      	STD  Y+10,R30
00044e 87fb      	STD  Y+10+1,R31
00044f e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000450 3040      	CPI  R20,0
000451 f011      	BREQ _0x2020044
000452 5f1f      	SUBI R17,-LOW(1)
000453 c001      	RJMP _0x2020045
                 _0x2020044:
000454 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000455 c004      	RJMP _0x2020046
                 _0x2020042:
000456 940e 05a0 	CALL SUBOPT_0xE
000458 940e 05b6 	CALL SUBOPT_0x11
                 _0x2020046:
                 _0x2020036:
00045a fd00      	SBRC R16,0
00045b c011      	RJMP _0x2020047
                 _0x2020048:
00045c 1715      	CP   R17,R21
00045d f478      	BRSH _0x202004A
00045e ff07      	SBRS R16,7
00045f c008      	RJMP _0x202004B
000460 ff02      	SBRS R16,2
000461 c004      	RJMP _0x202004C
000462 7f0b      	ANDI R16,LOW(251)
000463 2f24      	MOV  R18,R20
000464 5011      	SUBI R17,LOW(1)
000465 c001      	RJMP _0x202004D
                 _0x202004C:
000466 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000467 c001      	RJMP _0x202004E
                 _0x202004B:
000468 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000469 940e 0599 	CALL SUBOPT_0xD
00046b 5051      	SUBI R21,LOW(1)
00046c cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00046d 2f31      	MOV  R19,R17
00046e ff01      	SBRS R16,1
00046f c017      	RJMP _0x202004F
                 _0x2020050:
000470 3030      	CPI  R19,0
000471 f0a1      	BREQ _0x2020052
000472 ff03      	SBRS R16,3
000473 c006      	RJMP _0x2020053
000474 81ee      	LDD  R30,Y+6
000475 81ff      	LDD  R31,Y+6+1
000476 9125      	LPM  R18,Z+
000477 83ee      	STD  Y+6,R30
000478 83ff      	STD  Y+6+1,R31
000479 c005      	RJMP _0x2020054
                 _0x2020053:
00047a 81ae      	LDD  R26,Y+6
00047b 81bf      	LDD  R27,Y+6+1
00047c 912d      	LD   R18,X+
00047d 83ae      	STD  Y+6,R26
00047e 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00047f 940e 0599 	CALL SUBOPT_0xD
000481 3050      	CPI  R21,0
000482 f009      	BREQ _0x2020055
000483 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000484 5031      	SUBI R19,LOW(1)
000485 cfea      	RJMP _0x2020050
                 _0x2020052:
000486 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000487 e320      	LDI  R18,LOW(48)
000488 81ee      	LDD  R30,Y+6
000489 81ff      	LDD  R31,Y+6+1
00048a 940e 05f2 	CALL __GETW1PF
00048c 87e8      	STD  Y+8,R30
00048d 87f9      	STD  Y+8+1,R31
00048e 81ee      	LDD  R30,Y+6
00048f 81ff      	LDD  R31,Y+6+1
000490 9632      	ADIW R30,2
000491 83ee      	STD  Y+6,R30
000492 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000493 85e8      	LDD  R30,Y+8
000494 85f9      	LDD  R31,Y+8+1
000495 85aa      	LDD  R26,Y+10
000496 85bb      	LDD  R27,Y+10+1
000497 17ae      	CP   R26,R30
000498 07bf      	CPC  R27,R31
000499 f050      	BRLO _0x202005C
00049a 5f2f      	SUBI R18,-LOW(1)
00049b 85a8      	LDD  R26,Y+8
00049c 85b9      	LDD  R27,Y+8+1
00049d 85ea      	LDD  R30,Y+10
00049e 85fb      	LDD  R31,Y+10+1
00049f 1bea      	SUB  R30,R26
0004a0 0bfb      	SBC  R31,R27
0004a1 87ea      	STD  Y+10,R30
0004a2 87fb      	STD  Y+10+1,R31
0004a3 cfef      	RJMP _0x202005A
                 _0x202005C:
0004a4 332a      	CPI  R18,58
0004a5 f028      	BRLO _0x202005D
0004a6 ff03      	SBRS R16,3
0004a7 c002      	RJMP _0x202005E
0004a8 5f29      	SUBI R18,-LOW(7)
0004a9 c001      	RJMP _0x202005F
                 _0x202005E:
0004aa 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0004ab fd04      	SBRC R16,4
0004ac c01a      	RJMP _0x2020061
0004ad 3321      	CPI  R18,49
0004ae f420      	BRSH _0x2020063
0004af 85a8      	LDD  R26,Y+8
0004b0 85b9      	LDD  R27,Y+8+1
0004b1 9711      	SBIW R26,1
0004b2 f409      	BRNE _0x2020062
                 _0x2020063:
0004b3 c009      	RJMP _0x20200CD
                 _0x2020062:
0004b4 1753      	CP   R21,R19
0004b5 f010      	BRLO _0x2020067
0004b6 ff00      	SBRS R16,0
0004b7 c001      	RJMP _0x2020068
                 _0x2020067:
0004b8 c013      	RJMP _0x2020066
                 _0x2020068:
0004b9 e220      	LDI  R18,LOW(32)
0004ba ff07      	SBRS R16,7
0004bb c00b      	RJMP _0x2020069
0004bc e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0004bd 6100      	ORI  R16,LOW(16)
0004be ff02      	SBRS R16,2
0004bf c007      	RJMP _0x202006A
0004c0 7f0b      	ANDI R16,LOW(251)
0004c1 934a      	ST   -Y,R20
0004c2 940e 05a6 	CALL SUBOPT_0xF
0004c4 3050      	CPI  R21,0
0004c5 f009      	BREQ _0x202006B
0004c6 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0004c7 940e 0599 	CALL SUBOPT_0xD
0004c9 3050      	CPI  R21,0
0004ca f009      	BREQ _0x202006C
0004cb 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0004cc 5031      	SUBI R19,LOW(1)
0004cd 85a8      	LDD  R26,Y+8
0004ce 85b9      	LDD  R27,Y+8+1
0004cf 9712      	SBIW R26,2
0004d0 f008      	BRLO _0x2020059
0004d1 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0004d2 ff00      	SBRS R16,0
0004d3 c008      	RJMP _0x202006D
                 _0x202006E:
0004d4 3050      	CPI  R21,0
0004d5 f031      	BREQ _0x2020070
0004d6 5051      	SUBI R21,LOW(1)
0004d7 e2e0      	LDI  R30,LOW(32)
0004d8 93ea      	ST   -Y,R30
0004d9 940e 05a6 	CALL SUBOPT_0xF
0004db cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0004dc e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004dd cee0      	RJMP _0x2020016
                 _0x2020018:
0004de 85ac      	LDD  R26,Y+12
0004df 85bd      	LDD  R27,Y+12+1
0004e0 940e 05ee 	CALL __GETW1P
0004e2 940e 0602 	CALL __LOADLOCR6
0004e4 9664      	ADIW R28,20
0004e5 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0004e6 92ff      	PUSH R15
0004e7 2ef8      	MOV  R15,R24
0004e8 9726      	SBIW R28,6
0004e9 940e 05fd 	CALL __SAVELOCR4
0004eb 940e 05be 	CALL SUBOPT_0x12
0004ed 9730      	SBIW R30,0
0004ee f419      	BRNE _0x2020072
0004ef efef      	LDI  R30,LOW(65535)
0004f0 efff      	LDI  R31,HIGH(65535)
0004f1 c023      	RJMP _0x2080001
                 _0x2020072:
0004f2 01de      	MOVW R26,R28
0004f3 9616      	ADIW R26,6
0004f4 940e 05cf 	CALL __ADDW2R15
0004f6 018d      	MOVW R16,R26
0004f7 940e 05be 	CALL SUBOPT_0x12
0004f9 83ee      	STD  Y+6,R30
0004fa 83ff      	STD  Y+6+1,R31
0004fb e0e0      	LDI  R30,LOW(0)
0004fc 87e8      	STD  Y+8,R30
0004fd 87e9      	STD  Y+8+1,R30
0004fe 01de      	MOVW R26,R28
0004ff 961a      	ADIW R26,10
000500 940e 05cf 	CALL __ADDW2R15
000502 940e 05ee 	CALL __GETW1P
000504 93fa      	ST   -Y,R31
000505 93ea      	ST   -Y,R30
000506 931a      	ST   -Y,R17
000507 930a      	ST   -Y,R16
000508 e7e4      	LDI  R30,LOW(_put_buff_G101)
000509 e0f3      	LDI  R31,HIGH(_put_buff_G101)
00050a 93fa      	ST   -Y,R31
00050b 93ea      	ST   -Y,R30
00050c 01de      	MOVW R26,R28
00050d 961a      	ADIW R26,10
00050e dea5      	RCALL __print_G101
00050f 019f      	MOVW R18,R30
000510 81ae      	LDD  R26,Y+6
000511 81bf      	LDD  R27,Y+6+1
000512 e0e0      	LDI  R30,LOW(0)
000513 93ec      	ST   X,R30
000514 01f9      	MOVW R30,R18
                 _0x2080001:
000515 940e 0604 	CALL __LOADLOCR4
000517 962a      	ADIW R28,10
000518 90ff      	POP  R15
000519 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpy:
                 ; .FSTART _strcpy
00051a 93ba      	ST   -Y,R27
00051b 93aa      	ST   -Y,R26
00051c 91e9          ld   r30,y+
00051d 91f9          ld   r31,y+
00051e 91a9          ld   r26,y+
00051f 91b9          ld   r27,y+
000520 01cd          movw r24,r26
                 strcpy0:
000521 9161          ld   r22,z+
000522 936d          st   x+,r22
000523 2366          tst  r22
000524 f7e1          brne strcpy0
000525 01fc          movw r30,r24
000526 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000527 93ba      	ST   -Y,R27
000528 93aa      	ST   -Y,R26
000529 91a9          ld   r26,y+
00052a 91b9          ld   r27,y+
00052b 27ee          clr  r30
00052c 27ff          clr  r31
                 strlen0:
00052d 916d          ld   r22,x+
00052e 2366          tst  r22
00052f f011          breq strlen1
000530 9631          adiw r30,1
000531 cffb          rjmp strlen0
                 strlen1:
000532 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000533 93ba      	ST   -Y,R27
000534 93aa      	ST   -Y,R26
000535 27aa          clr  r26
000536 27bb          clr  r27
000537 91e9          ld   r30,y+
000538 91f9          ld   r31,y+
                 strlenf0:
000539 9005      	lpm  r0,z+
00053a 2000          tst  r0
00053b f011          breq strlenf1
00053c 9611          adiw r26,1
00053d cffb          rjmp strlenf0
                 strlenf1:
00053e 01fd          movw r30,r26
00053f 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _game:
0001b0           	.BYTE 0x12
                 _win:
0001c2           	.BYTE 0x10
                 _k:
0001d2           	.BYTE 0x2
                 _row:
0001d4           	.BYTE 0x4
                 _txt:
0001d8           	.BYTE 0x14
                 _num:
0001ec           	.BYTE 0x2
                 __base_y_G100:
0001ee           	.BYTE 0x4
                 __lcd_x:
0001f2           	.BYTE 0x1
                 __lcd_y:
0001f3           	.BYTE 0x1
                 __lcd_maxx:
0001f4           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000540 e0e3      	LDI  R30,LOW(3)
000541 e0f0      	LDI  R31,HIGH(3)
000542 16ae      	CP   R10,R30
000543 06bf      	CPC  R11,R31
000544 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000545 e0e3      	LDI  R30,LOW(3)
000546 e0f0      	LDI  R31,HIGH(3)
000547 16ce      	CP   R12,R30
000548 06df      	CPC  R13,R31
000549 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:85 WORDS
                 SUBOPT_0x2:
00054a 01f5      	MOVW R30,R10
00054b e0a6      	LDI  R26,LOW(6)
00054c e0b0      	LDI  R27,HIGH(6)
00054d 940e 05e6 	CALL __MULW12U
00054f 55e0      	SUBI R30,LOW(-_game)
000550 4ffe      	SBCI R31,HIGH(-_game)
000551 01df      	MOVW R26,R30
000552 01f6      	MOVW R30,R12
000553 0fee      	LSL  R30
000554 1fff      	ROL  R31
000555 0fae      	ADD  R26,R30
000556 1fbf      	ADC  R27,R31
000557 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000558 e0e0      	LDI  R30,LOW(0)
000559 e0f0      	LDI  R31,HIGH(0)
00055a 93ed      	ST   X+,R30
00055b 93fc      	ST   X,R31
00055c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00055d e0e8      	LDI  R30,LOW(8)
00055e e0f0      	LDI  R31,HIGH(8)
00055f 16ae      	CP   R10,R30
000560 06bf      	CPC  R11,R31
000561 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000562 01f5      	MOVW R30,R10
000563 eca2      	LDI  R26,LOW(_win)
000564 e0b1      	LDI  R27,HIGH(_win)
000565 0fee      	LSL  R30
000566 1fff      	ROL  R31
000567 0fae      	ADD  R26,R30
000568 1fbf      	ADC  R27,R31
000569 cfee      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
00056a 940e 00ae 	CALL _keypad
00056c 01f5      	MOVW R30,R10
00056d 940e 05d7 	CALL __LSLW2
00056f 0dec      	ADD  R30,R12
000570 1dfd      	ADC  R31,R13
000571 93e0 01d2 	STS  _k,R30
000573 93f0 01d3 	STS  _k+1,R31
000575 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000576 91a0 01d2 	LDS  R26,_k
000578 91b0 01d3 	LDS  R27,_k+1
00057a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00057b eeac      	LDI  R26,LOW(_num)
00057c e0b1      	LDI  R27,HIGH(_num)
00057d 0da4      	ADD  R26,R4
00057e 1db5      	ADC  R27,R5
00057f 91ec      	LD   R30,X
000580 bbeb      	OUT  0x1B,R30
000581 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000582 01f5      	MOVW R30,R10
000583 eca2      	LDI  R26,LOW(_win)
000584 e0b1      	LDI  R27,HIGH(_win)
000585 0fee      	LSL  R30
000586 1fff      	ROL  R31
000587 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000588 940e 05ee 	CALL __GETW1P
00058a 0fe6      	ADD  R30,R22
00058b 1ff7      	ADC  R31,R23
00058c 01dc      	MOVW R26,R24
00058d 93ed      	ST   X+,R30
00058e 93fc      	ST   X,R31
00058f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000590 940e 032f 	CALL __long_delay_G100
000592 e3a0      	LDI  R26,LOW(48)
000593 940c 0334 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000595 940e 02ad 	CALL __lcd_write_data
000597 940c 032f 	JMP  __long_delay_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xD:
000599 932a      	ST   -Y,R18
00059a 85ad      	LDD  R26,Y+13
00059b 85be      	LDD  R27,Y+13+1
00059c 85ef      	LDD  R30,Y+15
00059d 89f8      	LDD  R31,Y+15+1
00059e 9509      	ICALL
00059f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
0005a0 89e8      	LDD  R30,Y+16
0005a1 89f9      	LDD  R31,Y+16+1
0005a2 9734      	SBIW R30,4
0005a3 8be8      	STD  Y+16,R30
0005a4 8bf9      	STD  Y+16+1,R31
0005a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0005a6 85ad      	LDD  R26,Y+13
0005a7 85be      	LDD  R27,Y+13+1
0005a8 85ef      	LDD  R30,Y+15
0005a9 89f8      	LDD  R31,Y+15+1
0005aa 9509      	ICALL
0005ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
0005ac 89a8      	LDD  R26,Y+16
0005ad 89b9      	LDD  R27,Y+16+1
0005ae 9614      	ADIW R26,4
0005af 940e 05ee 	CALL __GETW1P
0005b1 83ee      	STD  Y+6,R30
0005b2 83ff      	STD  Y+6+1,R31
0005b3 81ae      	LDD  R26,Y+6
0005b4 81bf      	LDD  R27,Y+6+1
0005b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
0005b6 89a8      	LDD  R26,Y+16
0005b7 89b9      	LDD  R27,Y+16+1
0005b8 9614      	ADIW R26,4
0005b9 940e 05ee 	CALL __GETW1P
0005bb 87ea      	STD  Y+10,R30
0005bc 87fb      	STD  Y+10+1,R31
0005bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0005be 01de      	MOVW R26,R28
0005bf 961c      	ADIW R26,12
0005c0 940e 05cf 	CALL __ADDW2R15
0005c2 940e 05ee 	CALL __GETW1P
0005c4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005c5 9610      	adiw r26,0
0005c6 f039      	breq __delay_ms1
                 __delay_ms0:
0005c7 95a8      	wdr
                +
0005c8 ed80     +LDI R24 , LOW ( 0x7D0 )
0005c9 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005ca 9701     +SBIW R24 , 1
0005cb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005cc 9711      	sbiw r26,1
0005cd f7c9      	brne __delay_ms0
                 __delay_ms1:
0005ce 9508      	ret
                 
                 __ADDW2R15:
0005cf 2400      	CLR  R0
0005d0 0daf      	ADD  R26,R15
0005d1 1db0      	ADC  R27,R0
0005d2 9508      	RET
                 
                 __ANEGW1:
0005d3 95f1      	NEG  R31
0005d4 95e1      	NEG  R30
0005d5 40f0      	SBCI R31,0
0005d6 9508      	RET
                 
                 __LSLW2:
0005d7 0fee      	LSL  R30
0005d8 1fff      	ROL  R31
0005d9 0fee      	LSL  R30
0005da 1fff      	ROL  R31
0005db 9508      	RET
                 
                 __CWD1:
0005dc 2f6f      	MOV  R22,R31
0005dd 0f66      	ADD  R22,R22
0005de 0b66      	SBC  R22,R22
0005df 2f76      	MOV  R23,R22
0005e0 9508      	RET
                 
                 __LNEGW1:
0005e1 2bef      	OR   R30,R31
0005e2 e0e1      	LDI  R30,1
0005e3 f009      	BREQ __LNEGW1F
0005e4 e0e0      	LDI  R30,0
                 __LNEGW1F:
0005e5 9508      	RET
                 
                 __MULW12U:
0005e6 9ffa      	MUL  R31,R26
0005e7 2df0      	MOV  R31,R0
0005e8 9feb      	MUL  R30,R27
0005e9 0df0      	ADD  R31,R0
0005ea 9fea      	MUL  R30,R26
0005eb 2de0      	MOV  R30,R0
0005ec 0df1      	ADD  R31,R1
0005ed 9508      	RET
                 
                 __GETW1P:
0005ee 91ed      	LD   R30,X+
0005ef 91fc      	LD   R31,X
0005f0 9711      	SBIW R26,1
0005f1 9508      	RET
                 
                 __GETW1PF:
0005f2 9005      	LPM  R0,Z+
0005f3 91f4      	LPM  R31,Z
0005f4 2de0      	MOV  R30,R0
0005f5 9508      	RET
                 
                 __PUTPARD1:
0005f6 937a      	ST   -Y,R23
0005f7 936a      	ST   -Y,R22
0005f8 93fa      	ST   -Y,R31
0005f9 93ea      	ST   -Y,R30
0005fa 9508      	RET
                 
                 __SAVELOCR6:
0005fb 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005fc 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005fd 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005fe 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005ff 931a      	ST   -Y,R17
000600 930a      	ST   -Y,R16
000601 9508      	RET
                 
                 __LOADLOCR6:
000602 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000603 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000604 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000605 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000606 8119      	LDD  R17,Y+1
000607 8108      	LD   R16,Y
000608 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  24 r1 :   2 r2 :   0 r3 :   0 r4 :   5 r5 :   4 r6 :   4 r7 :   2 
r8 :   8 r9 :   6 r10:  42 r11:  16 r12:  25 r13:  11 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  17 r23:   5 
r24:  16 r25:   3 r26: 169 r27:  72 r28:  14 r29:   1 r30: 305 r31: 133 
x  :  30 y  : 171 z  :  20 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :  21 
adiw  :  36 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  23 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   2 brmi  :   1 brne  :  42 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 130 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  44 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  18 cpc   :  21 cpi   :  38 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   0 jmp   :  26 ld    :  33 ldd   :  77 ldi   : 159 
lds   :  11 lpm   :  14 lsl   :   7 lsr   :   0 mov   :  22 movw  :  64 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   8 out   :  18 pop   :   3 push  :   3 rcall :  22 ret   :  48 
reti  :   0 rjmp  :  91 rol   :   7 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   9 sbic  :   4 sbis  :   4 sbiw  :  23 sbr   :   0 sbrc  :   3 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  68 std   :  31 sts   :  17 sub   :   1 subi  :  20 swap  :   2 
tst   :   5 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c12   2916    174   3090   16384  18.9%
[.dseg] 0x000060 0x0001f5      0    149    149    1024  14.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
